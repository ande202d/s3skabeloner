Virker nogenlunde

maybe a cors nuget package?
https://github.com/jamshideftekhari/ItemWebService/blob/master/ItemWebService/Startup.cs


public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<ToDoContext>(opt => opt.UseInMemoryDatabase("TodoList"));

            // MiddleWare with policy
            services.AddCors(options =>
            {
                //HERE YOU DEFINE IT --------------------------------------------------------------------------------------
                //HUSK .WithHeaders("content-type") eller .AllowAnyHeader()
                options.AddPolicy("AllowAnyOrigin", builder => builder.AllowAnyOrigin().WithHeaders("content-type")); //THIS ALLOWS EVERYTHING (POST,GET,GETALL ETC.) ---------------------------------
                options.AddPolicy("AllowMyLocalOrigin", builder =>builder.WithOrigins("https://localhost:57980/%22"));
                options.AddPolicy("AllowGetPost", builder=>builder.AllowAnyOrigin().WithMethods("GET","POST"));
            });

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo {Title = "Items API", Version = "v1.0"});
            });



        }

public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            //HERE YOU APPLY IT --------------------------------------------------------------------------------------
            //app.UseCors("AllowAnyOrigin");
            app.UseCors("AllowMyLocalOrigin");
           //app.UseCors("AllowGetPost");

            app.UseSwagger();
            app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Items API v1.0"));
            app.UseSwaggerUI(c => c.RoutePrefix = "api/help");
            
        }




--------------------------------------------------------------------------------------------------------
COPY PASTE FROM WORKING CODE
COPY PASTE FROM WORKING CODE
COPY PASTE FROM WORKING CODE
--------------------------------------------------------------------------------------------------------

public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Items API", Version = "v1.0" });
            });
            services.AddCors(options =>
            {
                //options.AddPolicy("AllowAnyOrigin", builder => builder.AllowAnyOrigin().WithHeaders("content-type"));
                options.AddPolicy("AllowAnyOrigin", builder => builder.AllowAnyOrigin());
                //options.AddPolicy("AllowMyLocalOrigin", builder => builder.WithOrigins("http://localhost:3000"));
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseCors("AllowAnyOrigin");
            //app.UseCors("AllowMyLocalOrigin");


            app.UseSwagger();
            app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Items API v1.0"));
            app.UseSwaggerUI(c => c.RoutePrefix = "api/help");

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }